module GenServer
  VERSION: String

  def initialize: (*untyped noname) -> void
  def init: (*untyped noname) -> untyped
  def handle_call: (*untyped noname) -> [:reply, untyped, untyped]
  def handle_cast: (*untyped noname) -> [:noreply, untyped]
  def self.start_link: (singleton(Class) klass, ?Array[untyped] state) -> bot
  def self.receive: (untyped state) -> bot
  def self.cast: (String pid, [:push, untyped] message) -> :ok
  def self.call: (String pid, :pop message) -> untyped

  class PID
    def inspect: -> String
    alias to_s inspect
  end

  class Registry
    include Singleton

    attr_reader pids: Hash[PID, Struct[untyped]]
    def initialize: -> void
    def self.[]=: (PID pid, Struct[untyped] info) -> untyped
    def self.actor: (PID pid) -> Ractor
    def self.klass: (PID pid) -> Class

    class Info < Struct[untyped]
      attr_accessor actor(): Ractor
      attr_accessor klass(): Class
    end
  end
end
